package readme;/**
 * Created by DELL on 2018/6/20.
 */

/**
 * user is lwb
 **/


public class spring开发笔记 {

    /**
     spring 源码下载：https://github.com/spring-projects/spring-framework/tags


     本项目采用TDD(测试驱动开发)的方式进行。
     1.针对每个需求，以及我们的预期结果，写出测试用例，
     2.刚开始写出的测试用例肯定是测试不通过，因为被测试的需求实现还没有写。
     3.实现被测试的需求逻辑，测试用例正确执行。
     4.重构被测试的代码，也就是需求的实现。
     针对每个需求都经过这样的流程，这样每个需求都有完整的测试用例，将所有的小需求组合成一个完整的系统，
     等系统开发到了后期，无论是维护还是增加新的功能，都会比较方便。





     创建的java文件如何分包，哪些类放在接口包，那些放在实现包，
     通常采用的原则：
     1.在spring中接口放在一个包中，实现类放在这个包的support子包中。
     2.对于使用者可见的类接口(api)放在接口包中，对于用户不可见的类接口放在实现包中。







     程序开发过程的遵循的原则：
     1.接口最小化：每个接口的功能越简单也好，一个类可以实现多个小接口，但不要实现一个大接口
     2.单一职责原则，每个类能做事情不要太多，和就接口最小化原则的原理是相同的。
     3.重复代码是万恶之源，如果重复的代码中存在问题，那么就要对所有相同的代码进行修改。
     4.对于经常使用的类，初始化的过程进行简单，尽量只有get方法，少量的set方法，简单的构造方法。



     AOP实现其实采用的是代理来工作，虽然我们编写了很多类，但是在程序执行的时候，并不是执行我们写的这些类。而是参照我们写的这些类，
     自动生成的新的类，这些新的类才是程序运行过程中执行的类。
     这些自动生成的类，在什么时候生成？
     1.编译期生成。
        在编译的过程中，有源代码生成class文件的过程中，就将需要增加的逻辑(增强的功能)，添加到class文件中，也就是说生成的class文件并不是
        与我们的源码能对应的上的。新的class文件的生成需要源码的支持，因为是由源码编译而来的。
     2.运行期生成。
        再编过程中，生成的class文件和源码的是能共对应上的，但是在class在jvm中执行过程中，会生成新的class文件，这些文件才是程序最终执行的文件。
        我们编写的源码，以及这些源码编译生成的class文件，仅仅只是为了生成增强的class文件而工作的。新的class文件的生成不需要源码的支持，
        需要源码编译生成的class文件的支持，因为新的class文件是有class文件执行过程中产生的。在运行期中，不能对加载到jvm方法去中的class进行修改，
        所以只能依靠原class执行产生一个新的class文件。
        具体实现可以分为两种：
            继承：
                动态生成一个类的子类，在子类里面对父类进行增强。在客户端获取父类的时候，返回的时子类。
            实现：
                动态生成一个接口的实现，

     springaop的实现主要运行时动态生成类的方式，也就是运行期生成的方式。生成一个类/接口的子类/实现类来增强父类/接口的功能。当我们从容器中获取父类/接口类型的对象时，
     容器会将功能增强后对象返回。在用户不知情的情况(瞒天过海)下完成了增强类的替换。

     这两种方式最终生成的新的class文件是一样的，只是产生的时间不同而已。编译期的aop产生的class文件个数少于运行期产生的class文件个数。因为编译期aop不产生新的class文件，是对原来的class文件做修改。

     在spring的实现过程中，虽然使用的时动态生成类的方式，但是仍然引用了aspectJ中的很多核心类和概念：
        spring中的关于execution表达式语法结构，以及execution的解析直接使用aspectJ中的相关类完成的。(所以spring依赖了aspectJ)
        spring中仍然参考了aspectJ中的pointCut，JoinPoint，advice等概念。











     TDD:
        当我们根据需求设计出相关的类,比如说这个类的主要功能是什么,有那些方法.
        在实现这个类之前,写出对这个类的主要功能的测试用例.
        为了让这个类的测试用例测试通过，需要去实现这个类。

        通常在进行TDD开发时，要先写出一个高层次的此时用例，也就是对高层次功能的测试，高层次功能需要多个低层次功能的支持，
        所以要根据需求写出多个低层次的测试用例，然后设计出功能的相关类。








     */
}
